package Service;

import java.sql.Connection;
import java.sql.SQLException;

import Controller.OTPController;
import Converter.AccountTransactionMapper;
import Converter.CustomerMapper;
import Converter.EmployeeMapper;
import DTO.TransferMoneyDTO;
import Dao.AccountDaoImpl;
import Dao.AccountTransactionDaoImpl;
import Dao.TransactionDaoImpl;
import Database.PgSqlConnectionFactory;
import Exception.InsufficientAmountException;
import Exception.NotConfirmedException;
import Exception.TransactionFailedException;
import Model.Account;
import Model.AccountTransaction;
import Model.Customer;
import Model.Employee;
import Model.Transaction;

public abstract class TransferMoneyService {
	

	 
	
	public TransferMoneyService()   {

	}
	
	public void transferProcess(Transaction transaction) throws InsufficientAmountException,SQLException, TransactionFailedException {
		
			TransactionManager.executeTransaction((connection) -> {
		        processTransfer(connection,transaction);
		    });
			
	}
	
	public abstract void processTransfer(Connection connection,Transaction transaction ) throws InsufficientAmountException, SQLException, NotConfirmedException ;
	
	
	public void calculateWithdrawlAmount(AccountTransaction accountTransaction) throws InsufficientAmountException {
		Account account = accountTransaction.getAccount();
		double amount =account.getBalance() - accountTransaction.getAmount();
		if(amount < 0) {
			throw new InsufficientAmountException("Insufficient Amount");
		}else {
			account.setBalance(amount);
			accountDao.update(account);
		}
 	}
	
	public void calculateDepositAmount(AccountTransaction accountTransaction) throws InsufficientAmountException {
		Account account = accountTransaction.getAccount();
		double amount =account.getBalance() + accountTransaction.getAmount();
		account.setBalance(amount);
		accountDao.update(account);
 	}
}

//ALTER TABLE account_transaction
//ALTER COLUMN transaction_type TYPE VARCHAR();
