package Controller;

import java.sql.SQLException;

import Exception.InsufficientAmountException;
import Exception.TransactionFailedException;
import Model.Card;
import Model.CurrencyType;
import Model.Employee;
import View.CardTransferMoneyWindow;
import View.TransferMoneyWindow;

public class CardTransferMoneyController extends TransferMoneyController {
	
	private CardTransferMoneyWindow view;
	
	public CardTransferMoneyController() {
		super(new CardTransferMoneyWindow());
	}

	@Override
	public void buttonAction() {
		this.view = (CardTransferMoneyWindow)this.getView();
		this.view.getTransferButton().addActionListener(e -> {
			try {
				transferBtnAction();
			} catch (InsufficientAmountException e1) {
				e1.printStackTrace();
			} catch (SQLException e1) {
				e1.printStackTrace();
			} catch (TransactionFailedException e1) {
				e1.printStackTrace();
			}
		});
		
	}

	@Override
	public void transferBtnAction() throws InsufficientAmountException, SQLException, TransactionFailedException {
		Card sourceCardNumber = this.view.getSourceCard();
		Card targetCardNumber = this.view.getTargetCard();
		double amount = Double.parseDouble(this.view.getAmountField().getText());
		String description = this.view.getDescField().getText();
		CurrencyType currency = this.view.getCurrencyType();
		Employee employee = this.currentUser;
		
	}

	@Override	
	public void clearFields() {
		view.getCancelButton().addActionListener(e -> clearFields());
	    this.view.getAmountField().setText("");
	    this.view.getDescField().setText("");
	}
}
