package Dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import DTO.TransactionDTO;
import Model.Account;
import Model.AccountTransaction;
import Model.AccountTransactionType;
import Model.CurrencyType;
import Model.StatusType;
import Model.Transaction;

public class AccountTransactionDaoImpl extends AccountTransactionDao{
	
	private AccountDaoImpl accountDao;
	private TransactionDaoImpl transactionDao;
	
	public AccountTransactionDaoImpl() {
		accountDao = new AccountDaoImpl();
		transactionDao = new TransactionDaoImpl();
	}
	
	@Override
	public String getTableName() {
		return "account_transaction";
	}

	@Override
	public AccountTransaction converToObject(ResultSet resultset) {
		AccountTransaction accountTransaction = null;
		try {
			int id = resultset.getInt("id");
			int type = resultset.getInt("transaction_type");
			double amount = (double) resultset.getFloat("amount");
			Timestamp transactionDate = resultset.getTimestamp("transaction_date");
			String description = resultset.getString("description");
			int status = resultset.getInt("status");
			int currency = resultset.getInt("currency");
			int transactionId = resultset.getInt("transaction_id");
			int accountId = resultset.getInt("account_id");
			
			Account account = accountDao.getById(accountId);
			Transaction transaction = transactionDao.getById(transactionId);
			
			accountTransaction = new AccountTransaction(id,AccountTransactionType.fromValue(type),amount,transactionDate,description,StatusType.fromValue(status),CurrencyType.fromValue(currency),transaction,account);
		} catch(SQLException e) {
			System.out.print("SQL Exception for : "+ e.getMessage());
		}
		return accountTransaction;
	}

	@Override
	public String getInsertQuery() {
		return "Insert into "+this.getTableName()+" (transaction_type,amount,description,status,currency,transaction_id,account_id) values (?,?,?,?,?,?,?)";
	}

	@Override
	public String getUpdateQuery() {
		return "update "+this.getTableName()+" set transaction_type = ? amount = ? description = ? status = ? currency = ? transaction_id = ? account_id = ? where id = ?";
	}

	@Override
	public String getDeleteQuery() {
		return "delete from "+this.getTableName()+" where id = ?";
	}

	@Override
	public void prepareParams(PreparedStatement preparedStatement, AccountTransaction object) {
		try {
			System.out.print(object.getTransaction());
			preparedStatement.setInt(1, object.getTransactionType().getValue());
			preparedStatement.setFloat(2, (float)object.getAmount());
			preparedStatement.setString(3, object.getDescription());
			preparedStatement.setInt(4, object.getStatus().getValue());
			preparedStatement.setInt(5, object.getCurrency().getValue());
			preparedStatement.setInt(6, object.getTransaction().getId());
			preparedStatement.setInt(7, object.getAccount().getId());
		} catch(SQLException e) {
			System.out.print("SQL Exception for accountTransactionDao : "+ e.getMessage());
		}
		
	}

	@Override
	public void prepareParamsForUpdate(PreparedStatement preparedStatement, AccountTransaction object) {
		try {
			preparedStatement.setInt(1, object.getTransactionType().getValue());
			preparedStatement.setFloat(2, (float)object.getAmount());
			preparedStatement.setString(3, object.getDescription());
			preparedStatement.setInt(4, object.getStatus().getValue());
			preparedStatement.setInt(5, object.getCurrency().getValue());
			preparedStatement.setInt(6, object.getTransaction().getId());
			preparedStatement.setInt(7, object.getAccount().getId());
			preparedStatement.setInt(8, object.getId());
		} catch(SQLException e) {
			System.out.print("SQL Exception for : "+ e.getMessage());
		}
		
	}

	@Override
	public List<TransactionDTO> getAllTransaction() {
		List<TransactionDTO> objects = new ArrayList<TransactionDTO>();
		try {
			String query = "SELECT t.created_at,at.transaction_type,at.transaction_id,a.account_number,at.amount,at.description\r\n"
					+ "FROM account_transaction at\r\n"
					+ "JOIN \r\n"
					+ "transactions t \r\n"
					+ "ON at.transaction_id = t.id\r\n"
					+ "JOIN \r\n"
					+ "accounts a ON at.account_id = a.id\r\n"
					+ "WHERE \r\n"
					+ "at.transaction_type = 2 and a.id = 8; ";
			Connection connection = this.connectionFactory.createConnection();
			PreparedStatement preparestatement = connection.prepareStatement(query);
			ResultSet resultset = preparestatement.executeQuery();
			while(resultset.next()) {
				TransactionDTO transactionDTO = new TransactionDTO();
				transactionDTO.setTransactionId(resultset.getInt("at.transaction_id"));
				int type = resultset.getInt("at.transaction_type");
				transactionDTO.setAccountType(AccountTransactionType.fromValue(type));
				transactionDTO.setCreatedAt(resultset.getString("t.created_at"));
				transactionDTO.setAccountNumber(resultset.getString("a.account_number"));
				transactionDTO.setAmount(resultset.getDouble("at.amount"));
				transactionDTO.setDescription(resultset.getString("at.description"));
				objects.add(transactionDTO);
			}
		}catch (SQLException e) {
			System.out.print("SQL Exception for : "+e.getMessage());
			
		}finally {
			this.connectionFactory.closeConnection();
		}
		return objects;
	}

	
}
